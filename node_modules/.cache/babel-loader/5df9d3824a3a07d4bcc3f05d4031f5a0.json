{"ast":null,"code":"// Generated code\nexport class Expression {\n  constructor(expression) {\n    this.expression = expression;\n  }\n\n  accept(visitor) {\n    return visitor.visitExpressionStmt(this);\n  }\n\n}\nexport class Print {\n  constructor(expression) {\n    this.expression = expression;\n  }\n\n  accept(visitor) {\n    return visitor.visitPrintStmt(this);\n  }\n\n}\nexport class Var {\n  constructor(variable, initializer) {\n    this.variable = variable;\n    this.initializer = initializer;\n  }\n\n  accept(visitor) {\n    return visitor.visitVarStmt(this);\n  }\n\n}\nexport class Block {\n  constructor(statements) {\n    this.statements = statements;\n  }\n\n  accept(visitor) {\n    return visitor.visitBlockStmt(this);\n  }\n\n}\nexport class If {\n  constructor(condition, thenBranch, elseBranch) {\n    this.condition = condition;\n    this.thenBranch = thenBranch;\n    this.elseBranch = elseBranch;\n  }\n\n  accept(visitor) {\n    return visitor.visitIfStmt(this);\n  }\n\n}\nexport class While {\n  constructor(condition, body) {\n    this.condition = condition;\n    this.body = body;\n  }\n\n  accept(visitor) {\n    return visitor.visitWhileStmt(this);\n  }\n\n}\nexport class Break {\n  constructor() {}\n\n  accept(visitor) {\n    return visitor.visitBreakStmt(this);\n  }\n\n}\nexport class Function {\n  constructor(name, params, body) {\n    this.name = name;\n    this.params = params;\n    this.body = body;\n  }\n\n  accept(visitor) {\n    return visitor.visitFunctionStmt(this);\n  }\n\n}\nexport class Return {\n  constructor(keyword, value) {\n    this.keyword = keyword;\n    this.value = value;\n  }\n\n  accept(visitor) {\n    return visitor.visitReturnStmt(this);\n  }\n\n}","map":{"version":3,"sources":["/home/chriz/Documents/kame-code/src/logic/tslox/stmt.ts"],"names":["Expression","constructor","expression","accept","visitor","visitExpressionStmt","Print","visitPrintStmt","Var","variable","initializer","visitVarStmt","Block","statements","visitBlockStmt","If","condition","thenBranch","elseBranch","visitIfStmt","While","body","visitWhileStmt","Break","visitBreakStmt","Function","name","params","visitFunctionStmt","Return","keyword","value","visitReturnStmt"],"mappings":"AAAA;AAqBA,OAAO,MAAMA,UAAN,CAAiC;AACtCC,EAAAA,WAAW,CAAUC,UAAV,EAA4B;AAAA,SAAlBA,UAAkB,GAAlBA,UAAkB;AAAE;;AAEzCC,EAAAA,MAAM,CAAIC,OAAJ,EAA4B;AAChC,WAAOA,OAAO,CAACC,mBAAR,CAA4B,IAA5B,CAAP;AACD;;AALqC;AAQxC,OAAO,MAAMC,KAAN,CAA4B;AACjCL,EAAAA,WAAW,CAAUC,UAAV,EAA4B;AAAA,SAAlBA,UAAkB,GAAlBA,UAAkB;AAAE;;AAEzCC,EAAAA,MAAM,CAAIC,OAAJ,EAA4B;AAChC,WAAOA,OAAO,CAACG,cAAR,CAAuB,IAAvB,CAAP;AACD;;AALgC;AAQnC,OAAO,MAAMC,GAAN,CAA0B;AAC/BP,EAAAA,WAAW,CAAUQ,QAAV,EAAuCC,WAAvC,EAA2D;AAAA,SAAjDD,QAAiD,GAAjDA,QAAiD;AAAA,SAApBC,WAAoB,GAApBA,WAAoB;AAAE;;AAExEP,EAAAA,MAAM,CAAIC,OAAJ,EAA4B;AAChC,WAAOA,OAAO,CAACO,YAAR,CAAqB,IAArB,CAAP;AACD;;AAL8B;AAQjC,OAAO,MAAMC,KAAN,CAA4B;AACjCX,EAAAA,WAAW,CAAUY,UAAV,EAA8B;AAAA,SAApBA,UAAoB,GAApBA,UAAoB;AAAE;;AAE3CV,EAAAA,MAAM,CAAIC,OAAJ,EAA4B;AAChC,WAAOA,OAAO,CAACU,cAAR,CAAuB,IAAvB,CAAP;AACD;;AALgC;AAQnC,OAAO,MAAMC,EAAN,CAAyB;AAC9Bd,EAAAA,WAAW,CACAe,SADA,EAEAC,UAFA,EAGAC,UAHA,EAIT;AAAA,SAHSF,SAGT,GAHSA,SAGT;AAAA,SAFSC,UAET,GAFSA,UAET;AAAA,SADSC,UACT,GADSA,UACT;AAAE;;AAEJf,EAAAA,MAAM,CAAIC,OAAJ,EAA4B;AAChC,WAAOA,OAAO,CAACe,WAAR,CAAoB,IAApB,CAAP;AACD;;AAT6B;AAYhC,OAAO,MAAMC,KAAN,CAA4B;AACjCnB,EAAAA,WAAW,CAAUe,SAAV,EAAoCK,IAApC,EAAgD;AAAA,SAAtCL,SAAsC,GAAtCA,SAAsC;AAAA,SAAZK,IAAY,GAAZA,IAAY;AAAE;;AAE7DlB,EAAAA,MAAM,CAAIC,OAAJ,EAA4B;AAChC,WAAOA,OAAO,CAACkB,cAAR,CAAuB,IAAvB,CAAP;AACD;;AALgC;AAQnC,OAAO,MAAMC,KAAN,CAA4B;AACjCtB,EAAAA,WAAW,GAAG,CAAE;;AAEhBE,EAAAA,MAAM,CAAIC,OAAJ,EAA4B;AAChC,WAAOA,OAAO,CAACoB,cAAR,CAAuB,IAAvB,CAAP;AACD;;AALgC;AAQnC,OAAO,MAAMC,QAAN,CAA+B;AACpCxB,EAAAA,WAAW,CACAyB,IADA,EAEAC,MAFA,EAGAN,IAHA,EAIT;AAAA,SAHSK,IAGT,GAHSA,IAGT;AAAA,SAFSC,MAET,GAFSA,MAET;AAAA,SADSN,IACT,GADSA,IACT;AAAE;;AAEJlB,EAAAA,MAAM,CAAIC,OAAJ,EAA4B;AAChC,WAAOA,OAAO,CAACwB,iBAAR,CAA0B,IAA1B,CAAP;AACD;;AATmC;AAYtC,OAAO,MAAMC,MAAN,CAA6B;AAClC5B,EAAAA,WAAW,CAAU6B,OAAV,EAAmCC,KAAnC,EAAiD;AAAA,SAAvCD,OAAuC,GAAvCA,OAAuC;AAAA,SAAdC,KAAc,GAAdA,KAAc;AAAE;;AAE9D5B,EAAAA,MAAM,CAAIC,OAAJ,EAA4B;AAChC,WAAOA,OAAO,CAAC4B,eAAR,CAAwB,IAAxB,CAAP;AACD;;AALiC","sourcesContent":["// Generated code\n\nimport { Expr, Variable } from \"./expr\"\nimport { Token } from \"./token\"\n\nexport interface Visitor<T> {\n  visitExpressionStmt(stmt: Expression): T\n  visitPrintStmt(stmt: Print): T\n  visitVarStmt(stmt: Var): T\n  visitBlockStmt(stmt: Block): T\n  visitIfStmt(stmt: If): T\n  visitWhileStmt(stmt: While): T\n  visitBreakStmt(stmt: Break): T\n  visitFunctionStmt(stmt: Function): T\n  visitReturnStmt(stmt: Return): T\n}\n\nexport interface Stmt {\n  accept<T>(visitor: Visitor<T>): T\n}\n\nexport class Expression implements Stmt {\n  constructor(readonly expression: Expr) {}\n\n  accept<T>(visitor: Visitor<T>): T {\n    return visitor.visitExpressionStmt(this)\n  }\n}\n\nexport class Print implements Stmt {\n  constructor(readonly expression: Expr) {}\n\n  accept<T>(visitor: Visitor<T>): T {\n    return visitor.visitPrintStmt(this)\n  }\n}\n\nexport class Var implements Stmt {\n  constructor(readonly variable: Variable, readonly initializer?: Expr) {}\n\n  accept<T>(visitor: Visitor<T>): T {\n    return visitor.visitVarStmt(this)\n  }\n}\n\nexport class Block implements Stmt {\n  constructor(readonly statements: Stmt[]) {}\n\n  accept<T>(visitor: Visitor<T>): T {\n    return visitor.visitBlockStmt(this)\n  }\n}\n\nexport class If implements Stmt {\n  constructor(\n    readonly condition: Expr,\n    readonly thenBranch: Stmt,\n    readonly elseBranch?: Stmt\n  ) {}\n\n  accept<T>(visitor: Visitor<T>): T {\n    return visitor.visitIfStmt(this)\n  }\n}\n\nexport class While implements Stmt {\n  constructor(readonly condition: Expr, readonly body: Stmt) {}\n\n  accept<T>(visitor: Visitor<T>): T {\n    return visitor.visitWhileStmt(this)\n  }\n}\n\nexport class Break implements Stmt {\n  constructor() {}\n\n  accept<T>(visitor: Visitor<T>): T {\n    return visitor.visitBreakStmt(this)\n  }\n}\n\nexport class Function implements Stmt {\n  constructor(\n    readonly name: Token,\n    readonly params: Token[],\n    readonly body: Block\n  ) {}\n\n  accept<T>(visitor: Visitor<T>): T {\n    return visitor.visitFunctionStmt(this)\n  }\n}\n\nexport class Return implements Stmt {\n  constructor(readonly keyword: Token, readonly value?: Expr) {}\n\n  accept<T>(visitor: Visitor<T>): T {\n    return visitor.visitReturnStmt(this)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}